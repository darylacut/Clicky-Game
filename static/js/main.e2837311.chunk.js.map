{"version":3,"sources":["components/Jumbotron/index.js","components/Card/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","Card","props","onClick","handleIncrement","count","src","image","alt","name","country","Wrapper","children","App","state","places","score","clickedCards","setState","this","map","place","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ghEAceA,MAXf,WACE,OACE,yBAAKC,UAAU,6BACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAd,YACA,uBAAGA,UAAU,QAAb,mH,MCWGC,MAhBf,SAAcC,GACZ,OACE,yBAAKF,UAAU,QACb,yBAAKA,UAAU,0BAA0BG,QAAS,kBAAMD,EAAME,gBAAgBF,EAAMG,SAChF,yBAAKL,UAAU,WAAWM,IAAKJ,EAAMK,MAAOC,IAAKN,EAAMO,OACvD,yBAAKT,UAAU,oBACX,wBAAIA,UAAU,cAAcE,EAAMO,MAClC,uBAAGT,UAAU,aAAaE,EAAMQ,SAChC,uBAAGV,UAAU,aAAaE,EAAMG,W,MCJ/BM,MAJf,SAAiBT,GACf,OAAO,yBAAKF,UAAU,WAAWE,EAAMU,W,OC2C1BC,G,iNArCbC,MAAQ,CACNC,SACAV,MAAO,EACPW,MAAO,EACPC,aAAc,I,EAKfb,gBAAkB,WAEjB,EAAKc,SAAS,CAAEb,MAAO,EAAKS,MAAMT,MAAQ,K,wEAM1C,OACA,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACIc,KAAKL,MAAMC,OAAOK,KAAI,SAAAC,GAAK,OAC3B,kBAAC,EAAD,CACEC,GAAID,EAAMC,GACVb,KAAMY,EAAMZ,KACZF,MAAOc,EAAMd,MACbG,QAASW,EAAMX,QACfL,MAAOgB,EAAMhB,iB,GA7BPkB,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e2837311.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron() {\r\n  return (\r\n    <div className=\"jumbotron jumbotron-fluid\">\r\n        <div className=\"container\">\r\n            <h1 className=\"display-4\">TRAVELOG</h1>\r\n            <p className=\"lead\">Click on a pic to travel to it, but don't travel to the same place more than once. There's lots more to see!</p>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className=\"deck\">\r\n      <div className=\"card bg-dark text-white\" onClick={() => props.handleIncrement(props.count)}>\r\n          <img className=\"card-img\" src={props.image} alt={props.name}/>\r\n          <div className=\"card-img-overlay\">\r\n              <h5 className=\"card-title\">{props.name}</h5>\r\n              <p className=\"card-text\">{props.country}</p>\r\n              <p className=\"card-text\">{props.count}</p>\r\n          </div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Card;\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React, {Component} from 'react';\nimport Jumbotron from \"./components/Jumbotron\";\nimport Card from \"./components/Card/\";\nimport Wrapper from \"./components/Wrapper\";\nimport places from \"./places.json\";\nimport './App.css';\n\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    places,\n    count: 0,\n    score: 0,\n    clickedCards: []\n  };\n\n\n   // handleIncrement increments this.state.count by 1\n   handleIncrement = () => {\n    // use the setState method to update a component's state\n    this.setState({ count: this.state.count + 1 });\n  };\n\n\n  // Map this state of places and render a Card component for each object\n  render() {\n    return (\n    <div>\n      <Jumbotron/>\n      <Wrapper>\n         {this.state.places.map(place => (\n          <Card\n            id={place.id}\n            name={place.name}\n            image={place.image}\n            country={place.country}\n            count={place.count}\n          />\n         \n        ))}\n      </Wrapper>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}